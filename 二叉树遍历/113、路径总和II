
给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。

说明: 叶子节点是指没有子节点的节点。

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
   [5,4,11,2],
   [5,8,4,5]
]

解法一：递归
==========

```
List<List<Integer>> res = new ArrayList();
public List<List<Integer>> pathSum(TreeNode root, int sum) {
    LinkedList<Integer> temp = new LinkedList<>();// 定义一个有序list来存储路径
    helper(root, sum, temp);
    return res;}

public void helper(TreeNode node, int sum, LinkedList<Integer> temp) {
    if (node == null) {
        return;}
    temp.addLast(node.val);// 记录路径
    if (node.left == null && node.right == null && sum == node.val) {
        res.add(new ArrayList(temp));}
    helper(node.left, sum - node.val, temp);
    helper(node.right, sum - node.val, temp);
    temp.removeLast();}
```

解法二：深度优先遍历
=================

```java
public List<List<Integer>> pathSum(TreeNode root, int sum) {
    Stack<TreeNode> stack = new Stack<>();
    List<List<Integer>> ans = new ArrayList<>();
    List<Integer> temp = new ArrayList<>();
    TreeNode cur = root;
    TreeNode pre = null;
    int curSum = 0;
    while(cur != null || !stack.isEmpty()){
        while(cur != null){
            stack.push(cur);
            curSum += cur.val;
            cur = cur.left;}
        cur = stack.peek();
        if(curSum == sum && cur.left == null && cur.right == null){
            ans.add(new ArrayList(temp));}
        if(cur.right == null || cur.right == pre){
            TreeNode pop = stack.pop();
            curSum -= pop.val;
            temp.remove(temp.size()-1);
            pre = cur;
            cur = null;}
        else{
            cur = cur.right;}}
    return ans;}
```
