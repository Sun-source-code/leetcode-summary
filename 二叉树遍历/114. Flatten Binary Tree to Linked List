# leetcode-summary

题目描述（中等）
============

给定一个二叉树，原地将它展开为一个单链表。

 

例如，给定二叉树

    1
   / \
  2   5
 / \   \
3   4   6
将其展开为：

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

解法一：递归前序遍历
=================

```java
public void flatten(TreeNode root) {
    List<TreeNode> list = new ArrayList<>();
    preorder(root,list);
    int size = list.size();
    for(int i = 1;i < size;i++){
        TreeNode curr = list.get(i),prev = list.get(i-1);
        prev.left = null;
        prev.right = curr;}}
public void preorder(TreeNode root,List<TreeNode> list){
    if(root != null){
        list.add(root.val);
        preorder(root.left,list);
        preorder(root.right,list);}}
```

解法二：迭代前序遍历
=================

```java
public void flatten(TreeNode root) {
    List<TreeNode> list = new ArrayList<>();
    Deque<TreeNode> stack = new LinkedList<>();
    TreeNode node = root;
    while(node != null || !stack.isEmpty()){
        while(node != null){
            list.add(node.val);
            stack.push(node);
            node = node.left;}
        node = stack.pop();
        node = node.right;}
    int size = list.size();
    for(int i = 1;i < size;i++){
        TreeNode curr = list.get(i),prev = list.get(i-1);
        prev.left = null;
        prev.right = curr;}}
```


解法三：前序遍历和展开同时进行
=========================

```java
public void flatten(TreeNode root) {
    if(root == null) return;
    Deque<TreeNode> stack = new LinkedList<>();
    stack.push(root);
    TreeNode prev = null;
    while(!stack.isEmpty()){
        TreeNode curr = stack.pop();
        if(prev != null){
            prev.left = null;
            prev.right = curr;}
        TreeNode left = curr.left,right = curr.right;
        if(left != null){
            stack.push(left);}
        if(right != null){
            stack.push(right);}
        prev = curr;}}
```

解法四：寻找前驱节点
=================

```java
public void flatten(TreeNode root) {
    TreeNode node = root;
    while(node != null){
        if(node.left != null){
            TreeNode next = curr.left;
            TreeNode pre = next;
            while(pre.next != null){
                pre = pre.right;}
            pre.right = node.right;
            node.left = null;
            node.right = pre;}
        node = node.right;}}
```

总结：
====

前序遍历后让左子树为空，右子树指向下一个节点，这里需要注意寻找前驱节点的方法，非常巧妙
