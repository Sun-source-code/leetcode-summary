# leetcode-summary

题目描述（困难）
============

给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的中位数。

进阶：你能设计一个时间复杂度为 O(log (m+n)) 的算法解决此问题吗？

示例 1：

输入：nums1 = [1,3], nums2 = [2]
输出：2.00000
解释：合并数组 = [1,2,3] ，中位数 2

解法一：二分查找
=============

```java
public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int length1 = nums1.length,length2 = nums2.length;
    int total = length1 + length2;
    if(total % 2 == 1){
        int mid = total / 2;
        double median = getElement(nums1,nums2,mid+1);
        return median;}
    else{
        int mid1 = total / 2 - 1,mid2 = total / 2;
        double median = (getElement(nums1,nums2,mid1) + getElement(nums1,nums2,mid2)) / 2;
        return median;}}
public double getElement(int [] nums1,int [] nums2,int k){
    int len1 = nums1.length,len2 = nums2.length;
    int index1 = 0,index2 = 0;
    int element = 0;
    while(true){
        if(index1 == len1){
            return nums2[index2 + k - 1];}
        if(index2 == len2){
            return nums1[index1 + k - 1];}
        if(k == 1){
            return Math.min(nums1[index1],num2[index2]);}
        int half = k / 2;
        int newIndex1 = Math.min(index1 + half,len1) - 1;
        int newIndex2 = Math.min(index2 + half,len2) - 1;
        int pivot1 = nums1[newIndex1],pivot2 = nums2[newIndex2];
        if(pivot1 <= pivot2){
            k -= (newIndex1 - index1 + 1);
            index1 = newIndex1 + 1;}
        else{
            k -= (newIndex2 - index2 + 1);
            index2 = newIndex2 + 1;}}}
```

解法二：划分数组
==============

```java
public double findMedianSortedArrays(int [] nums1,int [] nums2){
  if(nums1.length > nums2.length){
    return findMedianSortedArrays(nums2,nums1);}
  int m = nums1.length,n = nums2.length;
  int left = 0,right = m,ans = -1;
  int median1 = 0,medians2 = 0;
  while(left < right){
    int i = (left + right) / 2;
    int j = (m + n + 1)/2-i;
    int num_im1 = (i == 0 ? Integer.MAX_VALUE : nums[i-1]);
    int num_i = (i == m ? Integer.MAX_VALUE : nums[i]);
    int num_jm1 = (j == 0 ? Integer.MAX_VALUE : nums[j-1]);
    int num_j = (j == n ? Integer.MAX_VALUE : nums[j]);
    if(num_im1 <= num_j)
      ansi = i;
      median1 = Math.max(nums_im1, nums_jm1);
      median2 = Math.min(nums_i, nums_j);
      left = i + 1;}
    else{
      right = i - 1;}}
    return (m+n) % 2 == 0 ? (median1+median2)/2.0 : median1;}
```

总结：
====

这里的二分特别巧妙。
