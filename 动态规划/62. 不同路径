# leetcode-summary

题目描述（中等）
============

一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

问总共有多少条不同的路径？

示例 1：

输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

解法一：动态规划
==============

dp[i][j] = dp[i-1][j] + dp[i][j-1]

```java
public int uniquePaths(int m, int n) {
    int [][] dp = new int[m][n];
    for(int i = 0;i < m;i++){
        dp[i][0] = 1;}
    for(int i = 0;i < n;i++){
        dp[0][i] = 1;}
    for(int i = 1;i < m;i++){
        for(int j = 1;j < n;j++){
            dp[i][j] = dp[i-1][j] + dp[i][j-1];}}
    return dp[m-1][n-1];}
```

转化为一维数组
============

```java
public int uniquePaths(int m, int n) {
    int [] dp = new int[m];
    for(int i = 0;i < m;i++){
        dp[i] = 1;}
    for(int i = 1;i < n;i++){
        for(int j = 1;j < m;j++){
            dp[j] = dp[j] + dp[j-1];}}
    return dp[m-1];
```

从后往前
=======

```java
public int uniquePaths(int m, int n) {
    int [] dp = new int[m];
    for(int i = 0;i < m;i++){
        dp[i] = 1;}
    for(int i = n - 2;i >= 0;i--){
        for(int j = m - 2;j >= 0;j--){
            dp[j] = dp[j] + dp[j+1];}}
    return dp[m-1];}
```

总结：
====

类似于斐波那契数列的问题，这里需要注意怎么降维。
