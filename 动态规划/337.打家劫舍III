# leetcode-summary

题目描述（中等）
============

在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。
这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。
一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 
如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例 1:

输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.

解法一：动态规划
=============

当前节点选择不偷：当前节点能偷到的最大钱数 = 左孩子能偷到的钱 + 右孩子能偷到的钱
当前节点选择偷：当前节点能偷到的最大钱数 = 左孩子选择自己不偷时能得到的钱 + 右孩子选择不偷时能得到的钱 + 当前节点的钱数
状态转移方程：
root[0] = Math.max(rob(root.left)[0], rob(root.left)[1]) + Math.max(rob(root.right)[0], rob(root.right)[1])
root[1] = rob(root.left)[0] + rob(root.right)[0] + root.val;

```java
public int rob(TreeNode root) {
    int [] result = robInternal(root);
    return Math.max(result[0],result[1]);}
public int [] robInternal(TreeNode root){
    if(root == null) return new int[2];
    int [] result = new int[2];
    int [] left = robInterval(root.left);
    int [] right = robInterval(root.right);
    result[0] = Math.max(left[0],left[1]) + Math.max(right[0],right[1]);
    result[1] = left[0] + right[0] + root.val);
    return result;}
```

总结：
====

打家劫舍最经典的方法就是动态规划，这里又有所不同，需要根据左右节点来判断，想到状态转移方程就很容易了。
